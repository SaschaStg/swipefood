default:
  image: "node:18-alpine"

stages:
  - lint
  - build
  - test
  - deploy:staging
  - deploy:prod

workflow:
  # set rules for when to create a pipeline
  rules:
    # run on default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # run on merge requests
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.frontend_rules_template:
  # only run if there are changes in the frontend directory or if on default branch
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - frontend/**/*
          # run if pipeline config changes
          - .gitlab-ci.yml
        compare_to: "main"

.backend_rules_template:
  # only run if there are changes in the backend directory or if on default branch
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - backend/**/*
          # run if pipeline config changes
          - .gitlab-ci.yml
        compare_to: "main"

.migrations_rules_template:
  # only run if there are changes in the backend/migrations directory or if on default branch
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - backend/migrations/**/*
          # run if pipeline config changes
          - .gitlab-ci.yml
        compare_to: "main"

.build_template:
  stage: "build"
  variables:
    TARGET: "build"
  script:
    - "cd $CONTEXT"
    - "npm ci --cache .npm --prefer-offline"
    - "npm run $TARGET"

.lint_template:
  stage: "lint"
  needs: [ ]
  script:
    - "cd $CONTEXT"
    - "npm ci --cache .npm --prefer-offline"
    - "npm run lint"

.test_template:
  stage: "test"
  variables:
    TARGET: "test"
  script:
    - "cd $CONTEXT"
    - "npm ci --cache .npm --prefer-offline"
    - "npm run $TARGET"

.docker_template:
  image: docker:cli
  tags:
    - docker-in-docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  services:
    - "docker:dind"
  variables:
    PLATFORMS: linux/amd64
    DOCKERFILE: "Dockerfile"
  script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD registry.mi.kienhoefr.de
    - docker context create cxt
    - docker buildx create --driver docker-container --use cxt
    - docker buildx build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from=type=registry,ref=$IMAGE_REPO:$TAG --pull --platform $PLATFORMS -t $IMAGE_REPO:$TAG -t $IMAGE_REPO:$CI_COMMIT_SHA --push -f $CONTEXT/$DOCKERFILE $CONTEXT

.deploy_template:
  image: registry.gitlab.com/ci-images/alpine-deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    DEPLOY_HOST: "bwc01.host.kienhoefr.de"
    DEPLOY_USER: "deploy"
  before_script:
    # setup ssh-agent
    - eval $(ssh-agent -s)
    - chmod 600 "$SSH_KEY"
    - ssh-add "$SSH_KEY"
  script:
    - printf "$COMMANDS" | ssh -o "BatchMode=yes" -o "UserKnownHostsFile=$HOST_KEY" $DEPLOY_USER@$DEPLOY_HOST

no-code-changes:
  # this is a noop job that is used to trigger the pipeline if there are no code changes
  # (since merge requests need the pipeline to succeed)
  rules:
    # don't run if there are changes in the frontend or backend directory, since then other jobs will run
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - frontend/**/*
          - backend/**/*
          # run if pipeline config changes
          - .gitlab-ci.yml
        compare_to: "main"
      when: never
    # only run if there are changes to the no-code files only (since there would be no pipeline otherwise)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - README.md
          - docker-compose.yaml
          - .gitignore
        compare_to: "main"
  script:
    - echo "Changes to README.md, docker-compose.yaml or .gitignore only. Skipping pipeline."

lint:frontend:
  extends: .lint_template
  variables:
    CONTEXT: frontend
  rules: !reference [ .frontend_rules_template, rules ]
  cache:
    key:
      files:
        - "frontend/package-lock.json"
      prefix: "frontend"
    paths:
      - "frontend/.npm"

lint:backend:
  extends: .lint_template
  variables:
    CONTEXT: backend
  rules: !reference [ .backend_rules_template, rules ]
  cache:
    key:
      files:
        - "backend/package-lock.json"
      prefix: "backend"
    paths:
      - "backend/.npm"

build:frontend:
  extends: .build_template
  rules: !reference [ .frontend_rules_template, rules ]
  needs:
    - "lint:frontend"
  variables:
    CONTEXT: frontend
  artifacts:
    paths:
      - "frontend/dist"
  cache:
    key:
      files:
        - "frontend/package-lock.json"
      prefix: "frontend"
    paths:
      - "frontend/.npm"

build:backend:
  extends: .build_template
  rules: !reference [ .backend_rules_template, rules ]
  needs:
    - "lint:backend"
  variables:
    CONTEXT: backend
  artifacts:
    paths:
      - "backend/dist"
  cache:
    key:
      files:
        - "backend/package-lock.json"
      prefix: "backend"
    paths:
      - "backend/.npm"

build:migrations:
  extends: .build_template
  rules: !reference [ .migrations_rules_template, rules ]
  needs:
    - "lint:backend"
  variables:
    CONTEXT: "backend"
    TARGET: "build:migrations"
  artifacts:
    paths:
      - "backend/dist-migrations"
  cache:
    key:
      files:
        - "backend/package-lock.json"
      prefix: "backend"
    paths:
      - "backend/.npm"

test:backend:
  extends: .test_template
  rules: !reference [ .backend_rules_template, rules ]
  needs:
    - "build:backend"
  variables:
    CONTEXT: backend
    TARGET: test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  cache:
    key:
      files:
        - "backend/package-lock.json"
      prefix: "backend"
    paths:
      - "backend/.npm"

deploy:staging:frontend:docker:
  extends: .docker_template
  stage: "deploy:staging"
  needs:
    - "build:frontend"
  variables:
    IMAGE_REPO: registry.mi.kienhoefr.de/swipefood/frontend
    TAG: staging
    CONTEXT: frontend

deploy:staging:frontend:
  extends: .deploy_template
  stage: "deploy:staging"
  needs:
    - "deploy:staging:frontend:docker"
  variables:
    COMMANDS: |
      frontend
      exit
    SSH_KEY: $STAGING_SSH_KEY
    HOST_KEY: $BWC01_HOST_KEY
  environment:
    name: "staging"
    url: "https://swipefood-staging.mi.kienhoefr.de"

deploy:staging:backend:docker:
  extends: .docker_template
  stage: "deploy:staging"
  needs:
    - "build:backend"
    - "test:backend"
  variables:
    IMAGE_REPO: registry.mi.kienhoefr.de/swipefood/backend
    TAG: staging
    CONTEXT: backend

deploy:staging:migrations:docker:
  extends: .docker_template
  stage: "deploy:staging"
  needs:
    - "build:migrations"
  variables:
    IMAGE_REPO: registry.mi.kienhoefr.de/swipefood/migrations
    TAG: staging
    CONTEXT: backend
    DOCKERFILE: "migrations.dockerfile"

# This will also run migrations
deploy:staging:backend:
  extends: .deploy_template
  stage: "deploy:staging"
  needs:
    - "deploy:staging:backend:docker"
    - job: "deploy:staging:migrations:docker"
      optional: true
  variables:
    COMMANDS: |
      backend
      exit
    SSH_KEY: $STAGING_SSH_KEY
    HOST_KEY: $BWC01_HOST_KEY
  environment:
    name: "staging API"
    url: "https://swipefood-staging.mi.kienhoefr.de/api"

deploy:prod:frontend:docker:
  extends: .docker_template
  stage: "deploy:prod"
  when: "manual"
  needs:
    - "deploy:staging:frontend"
  variables:
    IMAGE_REPO: registry.mi.kienhoefr.de/swipefood/frontend
    TAG: latest
    CONTEXT: frontend

deploy:prod:frontend:
  extends: .deploy_template
  stage: "deploy:prod"
  when: "manual"
  needs:
    - "deploy:prod:frontend:docker"
  variables:
    COMMANDS: |
      frontend
      exit
    SSH_KEY: $PROD_SSH_KEY
    HOST_KEY: $BWC01_HOST_KEY
  environment:
    name: "production"
    url: "https://swipefood.mi.kienhoefr.de"

deploy:prod:backend:docker:
  extends: .docker_template
  stage: "deploy:prod"
  when: "manual"
  needs:
    - "deploy:staging:backend"
  variables:
    IMAGE_REPO: registry.mi.kienhoefr.de/swipefood/backend
    TAG: latest
    CONTEXT: backend

deploy:prod:migrations:docker:
  extends: .docker_template
  stage: "deploy:prod"
  when: "manual"
  needs:
    - "deploy:staging:backend"
  variables:
    IMAGE_REPO: registry.mi.kienhoefr.de/swipefood/migrations
    TAG: latest
    CONTEXT: backend
    DOCKERFILE: "migrations.dockerfile"

# This will also run migrations
deploy:prod:backend:
  extends: .deploy_template
  stage: "deploy:prod"
  when: "manual"
  needs:
    - "deploy:prod:backend:docker"
    - job: "deploy:prod:migrations:docker"
      optional: true
  variables:
    COMMANDS: |
      backend
      exit
    SSH_KEY: $PROD_SSH_KEY
    HOST_KEY: $BWC01_HOST_KEY
  environment:
    name: "production API"
    url: "https://swipefood.mi.kienhoefr.de/api"
